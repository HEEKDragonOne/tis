syntax = "proto3";

import "common-msg.proto";
option java_multiple_files = true;
option java_package = "com.qlangtech.tis.rpc.grpc.log.stream";
option java_outer_classname = "LogCollectorProto";
option objc_class_prefix = "HLWS";

package stream;

service LogCollector {
    // 订阅日志信息
    rpc RegisterMonitorEvent (stream PMonotorTarget) returns (stream PExecuteState) {
    }
    // 订阅全量/DataFlow构建过程中各阶段执行的状态信息
    rpc BuildPhraseStatus (PBuildPhaseStatusParam) returns (stream PPhaseStatusCollection) {
    }
    // 分布式环境下，启动一个同步任务先需要向assemble节点注册所有子任务
    rpc InitTask (PPhaseStatusCollection) returns () {}
}

message PBuildPhaseStatusParam {
    uint64 taskid = 1;
}

message PPhaseStatusCollection {
    PDumpPhaseStatus dumpPhase = 1;
    PJoinPhaseStatus joinPhase = 2;
    PBuildPhaseStatus buildPhase = 3;
    PIndexBackFlowPhaseStatus indexBackFlowPhaseStatus = 4;
    uint32 taskId = 5;
}

message PDumpPhaseStatus {
    map<string /* table name,db.tableName */, TableDumpStatus> tablesDump = 1;
}


message PJoinPhaseStatus {
    map<string /* taskname */, JoinTaskStatus> taskStatus = 1;
}

message PBuildPhaseStatus {
    map<string, BuildSharedPhaseStatus> nodeBuildStatus = 1;
}

message PIndexBackFlowPhaseStatus {
    map<string /*nodeName*/, NodeBackflowStatus> nodesStatus = 1;
}

message PMonotorTarget {

    string collection = 1;
    uint32 taskid = 2;
    PExecuteState.LogType logtype = 3;

//    enum LogType {
//        INCR_DEPLOY_STATUS_CHANGE = 0;
//        // 近一段时间内增量监听的各个tag的多少值
//        MQ_TAGS_STATUS = 1;
//        FULL = 2;
//        INCR = 3;
//        INCR_SEND = 4;
//    }
}
message PExecuteState {

    InfoType infoType = 1;
    LogType logType = 2;
    string msg = 3;
    string from = 4;
    uint64 jobId = 5;
    uint64 taskId = 6;
    string serviceName = 7;
    string execState = 8;
    uint64 time = 9;
    string component = 10;

    enum LogType {
        // 部署状态变化
        INCR_DEPLOY_STATUS_CHANGE = 0;
        // 近一段时间内增量监听的topic下各个tag的多少值
        MQ_TAGS_STATUS = 1;
        // 全量构建
        FULL = 2;
        // 增量构建
        INCR = 3;
        // 增量记录详细发送
        INCR_SEND = 4;
    }

    enum InfoType {
        INFO = 0;
        WARN = 1;
        ERROR = 2;
        FATAL = 3;
    }
}

