<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta name="robots" content="noindex, nofollow">
  <meta name="googlebot" content="noindex, nofollow">
    <link href="/css/bootstrap.min.css" rel="stylesheet">
    <link href="/css/highlight.css" rel="stylesheet">
    <link href="/css/bootstrap-switch.min.css" rel="stylesheet">
  <!--
  <link rel="stylesheet" type="text/css" href="/css/result-light.css">
  -->
  <style type="text/css">
   .solr-tps{
    font-size: 60px;
    font-weight: bold;
    color: green;
    float:left;
   }

   .chart{
    float:left;
   }

   .child-tps{
    float:left;
   }
   .child-tps li{
      color: #1E1C1C;
      font-size: 14px;
      list-style: none;
   }

   .child-tps{
     padding:0px;
   }

  </style>

   <title>TIS INCR TPS</title>
   <script type="text/javascript" src="/js/jquery.2.1.4.min.js"></script>
   <script src="/js/highcharts.js"></script>
   <script src="/js/bootstrap.min.js"></script>
   <script src="/js/highlight.js"></script>
   <script src="/js/bootstrap-switch.min.js"></script>

</head>

<body>

<p></p>
<div style="margin:0 auto;width:90%">
 <p></p>
 <p  class="text-right">
   <input id="switch-size" type="checkbox" data-on-text="采点频率1s"
      data-off-color="primary" data-off-text="采点频率10s" checked data-size="normal">
 </p>
<table width="100%" style="border:2px solid #333333 ;" >
 #foreach($s in $stats)
<tr>
  <td id="block${s.left.collectionName}" width="50%">
   <div id="$s.left.collectionName" class="chart" style=" margin: 0 auto"></div>
   <h2 class="solr-tps">0</h2>
   <ul class="child-tps"></ul>
  </td>

 #if($s.right)
  <td id="block${s.right.collectionName}" width="50%">
   <div id="$s.right.collectionName" class="chart" style=" margin: 0 auto"></div>
   <h2 class="solr-tps">0</h2>
   <ul class="child-tps"></ul>
  </td>
 #else
   <td></td>
 #end
  </tr>
 #end
</table>
</div>

</body>

</html>
<script type='text/javascript'>//<![CDATA[

$(function () {

   $(document).ready(function () {
      $("input[type=\"checkbox\"]")
       .bootstrapSwitch()
       .on('switchChange.bootstrapSwitch', function(event, state) {
         AddPointQueue.watchGapProp= state?'updateqps':'updateqps10';
       });

    Highcharts.setOptions({
            global: {
                useUTC: false
            }
      });




   #foreach($s in $stats)
       createRealState("$s.left.collectionName");

       #if($s.right)
         createRealState("$s.right.collectionName");
       #end

   #end

    });

    var AddPointQueue ={
	  listener:{},
	  watchGapProp:'updateqps',
	  addObserver:function(collection,series){
	     this.listener[collection] = series;
	  },
      addPoints: function(points){
	    var point ;

	    for(var i = 0;i<points.length;i++){
		  point = points[i];
		  var qps =0 ;
		  if(this.listener[point.collection]){
		   qps = point[this.watchGapProp]|0;
		   console.debug(this.watchGapProp+":"+qps);
			    this.listener[point.collection].addPoint([point.time, qps], true, true);
		  }

		  $("#block"+ point.collection+" .solr-tps").html(qps);

		  var ul = $("#block"+ point.collection+" .child-tps");
		  for(var key in point.childtabtps){
		   var span =ul.find("."+key);
		   if(span.length<1){
	          ul.append("<li>"+key+":<span class='"+key+"'>"+ point.childtabtps[key] +"</span></li>");
	       }else{
	          span.html(point.childtabtps[key]);
	       } }
		}
	  }
	};

   function createRealState(containerName){
   var control =  $('#'+containerName).highcharts({
            chart: {
                height:180,
			    width:700,
                type: 'spline',
                animation: Highcharts.svg, // don't animate in old IE
                marginRight: 10,
                events: {
                    load: function () {

                        // set up the updating of the chart each second
                        var series = this.series[0];
                         AddPointQueue.addObserver(containerName,series);
                        //setInterval(function () {
                        //    var x = (new Date()).getTime(), // current time
                        //        y = Math.random();
                        //    series.addPoint([x, y], true, true);
                        //}, 1000);
                    }
                }
            },
            title: {
                 align:"left",
				style:{"fontSize":"10px"},
                text: containerName+' update'
            },
            xAxis: {
                type: 'datetime',
                tickPixelInterval: 150
            },
            yAxis: {
                title: {
                    text: 'TPS'
                },
                plotLines: [{
                    value: 0,
                    width: 1,
                    color: '#808080'
                }]
            },
            tooltip: {
                formatter: function () {
                    return '<b>' + this.series.name + '</b><br/>' +
                       // Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x) + '<br/>' +
                       Highcharts.dateFormat('%H:%M:%S', this.x) + '<br/>' +
                        Highcharts.numberFormat(this.y, 2);
                }
            },
            legend: {
                enabled: false
            },
            exporting: {
                enabled: false
            },
            series: [{
                name: 'tps',
                data: (function () {
                    // generate an array of random data
                    var data = [],
                        time = (new Date()).getTime(),
                        i;

                    for (i = -38; i <= 0; i += 1) {
                        data.push({
                            x: time + i * 1000,
                            y: 0
                        });
                    }
                    return data;
                }())
            }]
        });


     return control;
   }


    var Chat = {};

        Chat.socket = null;

         Chat.isStop = false;

        Chat.stop = function(){
           Chat.isStop = true;
        }

        Chat.resume = function(){
           Chat.isStop = false;
        }

        Chat.connect = (function(host) {
            if ('WebSocket' in window) {
                Chat.socket = new WebSocket(host);
            } else if ('MozWebSocket' in window) {
                Chat.socket = new MozWebSocket(host);
            } else {
                Console.log('Error: WebSocket is not supported by this browser.');
                return;
            }

            Chat.socket.onopen = function () {
                //Console.log('Info: WebSocket connection opened.');
                //document.getElementById('chat').onkeydown = function(event) {
                //    if (event.keyCode == 13) {
                //        Chat.sendMessage();
                //    }
                //};

                //console.debug("hello");
            };

            Chat.socket.onclose = function () {
               // document.getElementById('chat').onkeydown = null;
               // Console.log('Info: WebSocket closed.');
            };

            Chat.socket.onmessage = function (message) {
                if(Chat.isStop){
                  return ;
                }
                var msg = jQuery.parseJSON(message.data);

               AddPointQueue.addPoints(msg);
            };
        });



        Chat.initialize = function() {
Chat.connect('ws://' + window.location.host + '/realtime-status');
         };

      //  Chat.sendMessage = (function() {
      //      var message = document.getElementById('chat').value;
      //      if (message != '') {
      //          Chat.socket.send(message);
      //          document.getElementById('chat').value = '';
       //     }
       // });

        var Console = {};

        Console.log = (function(message) {
         // console.debug(message);
        });

        Chat.initialize();


	var ii = 0;
	function addmessage(msg){
	  // removeHead();
	  // console.debug(msg);
	   AddPointQueue.addPoints(msg);
	}




	// end of anomy function
});
//]]>

</script>

